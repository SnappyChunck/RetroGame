[gd_scene load_steps=4 format=3 uid="uid://lqyku5wn2wo0"]

[ext_resource type="Script" uid="uid://cymj42wydvns" path="res://Player/camera.gd" id="2_4ntmi"]

[sub_resource type="GDScript" id="GDScript_hvfyp"]
script/source = "extends CharacterBody3D


@onready var cam: Camera3D = $Head/Camera

@export var sprint_speed := 9.5
@export var fov_multiplier := 1.1
@onready var normal_speed: float = speed
@onready var normal_fov: float = cam.fov

@export var gravity_multiplier := 3.5
@export var speed := 7.5
@export var acceleration := 6
@export var deceleration := 10
@export_range(0.0, 1.0, 0.05) var air_control := 0.3
@export var jump_height := 10
var direction := Vector3()
var input_axis := Vector2()
# Get the gravity from the project settings to be synced with RigidDynamicBody nodes.
@onready var gravity: float = (ProjectSettings.get_setting(\"physics/3d/default_gravity\") * gravity_multiplier)

# Called every physics tick. 'delta' is constant
func _physics_process(delta: float) -> void:
	input_axis = Input.get_vector(&\"move_back\", &\"move_forward\", &\"move_left\", &\"move_right\")
	
	direction_input()
	
	if is_on_floor():
		if Input.is_action_just_pressed(&\"jump\"):
			velocity.y = jump_height
	else:
		velocity.y -= gravity * delta
	
	if can_sprint():
		speed = sprint_speed
		cam.set_fov(lerp(cam.fov, normal_fov * fov_multiplier, delta * 8))
	else:
		speed = normal_speed
		cam.set_fov(lerp(cam.fov, normal_fov, delta * 8))
	
	accelerate(delta)
	
	move_and_slide()


func direction_input() -> void:
	direction = Vector3()
	var aim: Basis = get_global_transform().basis
	direction = aim.z * -input_axis.x + aim.x * input_axis.y


func accelerate(delta: float) -> void:
	# Using only the horizontal velocity, interpolate towards the input.
	var temp_vel := velocity
	temp_vel.y = 0
	
	var temp_accel: float
	var target: Vector3 = direction * speed
	
	if direction.dot(temp_vel) > 0:
		temp_accel = acceleration
	else:
		temp_accel = deceleration
	
	if not is_on_floor():
		temp_accel *= air_control
	
	var accel_weight = clamp(temp_accel * delta, 0.0, 1.0)
	temp_vel = temp_vel.lerp(target, accel_weight)
	
	velocity.x = temp_vel.x
	velocity.z = temp_vel.z

func can_sprint() -> bool:
	return (Input.is_action_pressed(&\"sprint\") #controller.is_on_floor() and 
			and input_axis.x >= 0.5)
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_fn1rj"]

[node name="Player" type="CharacterBody3D"]
collision_layer = 2
collision_mask = 3
floor_block_on_wall = false
floor_snap_length = 0.5
script = SubResource("GDScript_hvfyp")
sprint_speed = 6.0
gravity_multiplier = 3.0
speed = 5.0

[node name="Collision" type="CollisionShape3D" parent="."]
shape = SubResource("CapsuleShape3D_fn1rj")

[node name="Head" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.63, 0)
script = ExtResource("2_4ntmi")

[node name="Camera" type="Camera3D" parent="Head"]
current = true
